
import socket
import time
import libmedia_codec
import numpy
import threading
import sys
import cv2
import collections
import queue
import traceback

host = "192.168.2.1"
port = 40923

#imgstream = collections.deque(maxlen=10)
imgstream = queue.Queue(maxsize=16)

def main(host, port):
    address = (host, int (port))
    
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    print("con...")
    
    s.connect(address)
    s.send(str("command;").encode('utf-8'))
    
    print("CON MADE")
    
    while True:
        print(">>> please input SDK cmd: ")
        msg = input() #first msg must be "command" to initiate connection
        
        if msg.upper() == 'Q':
            break
        
        if msg.upper() == 'STREAM ON':
            CamF.start()
            StreamWatch.start()
            
           
        if msg.upper() == 'STREAM OFF':
            CamF.join()
        
        # Add the ending character.
        msg += ';'
        
        s.send(msg.encode('utf-8'))
        try:
            buf = s.recv(1024)
            print(str(buf))
            print(buf.decode('utf-8'))
        except socket.error as e:
            print("Socket Error :", e)
            sys.exit(1)
        if not len(buf):
            break
    
    print("Stopped")
    s.shutdown(socket.SHUT_WR)
    s.close()
    
def CamReciv(host, imgstream):
    CamAddr = (host, int (40921))
    CamStream = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    CamStream.connect(CamAddr)

    FrameNum = 0
    decoder = libmedia_codec.H264Decoder()
    RecvBuf = b''
    while True:
        try:
            buf = CamStream.recv(2**16)
            print(FrameNum)
            RecvBuf += buf
            Frames = decoder.decode(RecvBuf)
            availFrames = len(Frames)
            if availFrames > 0:
                Frame_Data = Frames[availFrames-1]
                FrameNum += 1
                (frame, width, height, ls) = Frame_Data
                if frame:
                        
                    frame = numpy.fromstring(frame, dtype=numpy.ubyte, count=len(frame), sep='')
                    frame = (frame.reshape((height, width, 3)))
                    imgstream.put(frame, timeout=1)

                    RecvBuf = b''
                    
        except socket.error as e:
            print("Socket Error :", e)
            sys.exit(1)
    
def StreamWatcher(imgstream):
    FrameError = 0
    while True:
        try:
            F = imgstream.get()
            #F = cv2.flip(F, 1)
            try:
                with imgstream.mutex:
                    imgstream.queue.clear()
            except:
                print("Queue was already empty")
                continue
            
            cv2.imshow('IP Camera stream',F)
            cv2.waitKey(1)
        except Exception as e:
            print(f'Caught error: {e} Traceback: {traceback.format_exc()}')
            
        

if __name__ == '__main__':
    CamF = threading.Thread(target=CamReciv, args=[host, imgstream])
    StreamWatch = threading.Thread(target=StreamWatcher, args=[imgstream])
    main(host, port)